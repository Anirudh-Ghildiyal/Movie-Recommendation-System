# -*- coding: utf-8 -*-
"""Movie Recommendation System

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eusstM7xfn5IQT1J5CXWjK9PjHzI_pl1
"""

import pandas as pd
import numpy as np

credits = pd.read_csv("/content/drive/MyDrive/ML/tmdb_5000_credits.csv")
movies = pd.read_csv("/content/drive/MyDrive/ML/tmdb_5000_movies.csv")

credits.head()

movies.head()

print(movies.shape)
print(credits.shape)
movies = movies.merge(credits, on="title")
print(movies.shape)

movies = movies[["movie_id", "title", "overview", "genres", "keywords", "cast", "crew"]]
movies.head()

movies.isnull().sum()

movies.dropna(inplace = True)

movies.duplicated().sum()

movies.iloc[0].genres

import ast
def convert(obj):
  L = []
  for i in ast.literal_eval(obj):
    L.append(i["name"])
  return L

movies.genres = movies.genres.apply(convert)

movies.head()

movies.keywords = movies.keywords.apply(convert)
movies.head()

def convert3(obj):
  L = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      L.append(i["name"])
      counter+=1
    else:
      break
  return L

movies.cast = movies.cast.apply(convert3)
movies.head()

def fetch_director(obj):
  L = []
  for i in ast.literal_eval(obj):
    if i["job"] == "Director":
      L.append(i["name"])
      break
  return L

movies.crew = movies.crew.apply(fetch_director)
movies.head()

movies.overview[1]

movies.overview = movies.overview.apply(lambda x : x.split())
movies.head()

movies.genres = movies.genres.apply(lambda x:[i.replace(" ","") for i in x])
movies.keywords = movies.keywords.apply(lambda x:[i.replace(" ","") for i in x])
movies.cast = movies.cast.apply(lambda x:[i.replace(" ","") for i in x])
movies.crew = movies.crew.apply(lambda x:[i.replace(" ","") for i in x])

movies.head()

movies["tags"] = movies.overview + movies.genres + movies.keywords + movies.cast + movies.crew

movies.head()

new_df = movies[["movie_id", "title", "tags"]]
new_df.head()

new_df.tags = new_df.tags.apply(lambda x:" ".join(x))
new_df.tags[0]

new_df.tags = new_df.tags.apply(lambda x:x.lower())
new_df.head()

import nltk
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

new_df["tags"].apply(stem)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features= 5000, stop_words="english")
vectors = cv.fit_transform(new_df["tags"]).toarray()

cv.get_feature_names_out()

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vectors)

def recommend(movie):
  movie_index = new_df[new_df["title"] == movie].index[0]
  distance = similarity[movie_index]
  movies_list = sorted(list(enumerate(distance)), reverse = True, key = lambda x:x[1])[1:6]

  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend("Batman Begins")

import pickle
pickle.dump(new_df.to_dict(), open("movie_dict.pkl","wb"))
pickle.dump(similarity, open("similarity.pkl","wb"))

"""# Website Launch Code"""

!pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import pickle
# import requests
# 
# def fetch_poster(movie_id):
#   response = requests.get("https://api.themoviedb.org/3/movie/{}?api_key=e81dd9737aac1632c92c3216713e7831&language=en-US".format(movie_id))
#   data = response.json()
#   return "https://image.tmdb.org/t/p/w500/" + data["poster_path"]
# 
# def recommend(movie):
#   movie_index = movies[movies["title"] == movie].index[0]
#   distance = similarity[movie_index]
#   movies_list = sorted(list(enumerate(distance)), reverse = True, key = lambda x:x[1])[1:6]
# 
#   recommended_movies = []
#   recommended_movies_poster = []
#   for i in movies_list:
#     movie_id = movies.iloc[i[0]].movie_id
#     recommended_movies.append(movies.iloc[i[0]].title)
#     recommended_movies_poster.append(fetch_poster(movie_id))
#   return recommended_movies, recommended_movies_poster
# 
# st.title("Movie Recommendation System")
# 
# movies_dict = pickle.load(open("movie_dict.pkl","rb"))
# movies = pd.DataFrame(movies_dict)
# 
# similarity = pickle.load(open("similarity.pkl","rb"))
# selected_movie_name = st.selectbox("Enter your movie",movies["title"].values)
# 
# if st.button("Recommend Movie"):
#   names, posters = recommend(selected_movie_name)
#   col1, col2, col3, col4, col5 = st.columns(5)
#   with col1:
#     st.text(names[0])
#     st.image(posters[0], use_column_width=True)
#   with col2:
#     st.text(names[1])
#     st.image(posters[1], use_column_width=True)
#   with col3:
#     st.text(names[2])
#     st.image(posters[2], use_column_width=True)
#   with col4:
#     st.text(names[3])
#     st.image(posters[3], use_column_width=True)
#   with col5:
#     st.text(names[4])
#     st.image(posters[4], use_column_width=True)
# 
# 
# st.markdown("<h1 style='text-align: center; color: #0000FF;'>Movie Recommendation System</h1>", unsafe_allow_html=True)
# st.markdown(
#     """
#     <style>
#         body {
#             background-color: #f4f4f4;
#         }
#     </style>
#     """,
#     unsafe_allow_html=True
# )
# st.markdown(
#     """
#     <style>
#         .stButton {
#             margin: 10px;
#         }
#     </style>
#     """,
#     unsafe_allow_html=True
# )

!wget -q -O - ipv4.icanhazip.com

!streamlit run app.py & npx localtunnel --port 8501